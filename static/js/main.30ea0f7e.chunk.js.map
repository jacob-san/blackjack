{"version":3,"sources":["utils/generateShuffledDeck.js","utils/sumHand.js","utils/isSplittableHand.js","components/Card/Card.js","components/Hand/Hand.js","components/PlayerSide/PlayerSide.js","components/DealerSide/DealerSide.js","components/GameOverNotification/GameOverNotification.js","components/OutcomeNotification/OutcomeNotification.js","components/BetInput/BetInput.js","components/GameButton/GameButton.js","components/ChipsTally/ChipsTally.js","components/RigDeckCheckbox/RigDeckCheckbox.js","components/ControlPanel/ControlPanel.js","App.js","utils/isWin.js","utils/isTie.js","utils/rigGameForSplits.js","index.js"],"names":["generateShuffledDeck","SUITS","deck","i","m","length","Math","floor","random","shuffle","flatMap","rank","map","suit","rankToValuesMap","two","three","four","five","six","seven","eight","nine","ten","jack","queen","king","sumHand","cards","reduce","totals","currentCard","split","totalAces","value","scoreWithoutAces","getHandTotals","largerScore","calculateScoreWithAces","getRankFromCard","card","Card","className","key","alt","src","Hand","hand","score","currentHand","turn","isEqual","PlayerSide","playerHands","JSON","stringify","DealerSide","dealerHand","GameOverNotification","gameOverNotification","resetStateForNewHand","setChips","onClick","OutcomeNotification","outcomeNotification","BetInput","setBet","chips","useState","input","setInput","errorMessage","setErrorMessage","useEffect","revert","setTimeout","clearTimeout","handleClick","submittedBet","Number","onChange","e","target","test","onKeyPress","GameButton","content","ChipsTally","RigDeckCheckbox","toggleIsRiggedForSplits","type","style","width","height","id","checked","htmlFor","ControlPanel","setDeck","bet","setPlayerHands","setCurrentHand","setTurn","deckCopy","handsCopy","cloneDeep","currentHandCopy","newCard","pop","push","currentHandIndex","findIndex","splice","hitPlayer","nextHand","currentIndex","isSplittableHand","App","setDealerHand","isRiggedForSplits","setOutcomeNotification","setGameOverNotification","dealCards","every","delayedSetTurn","delayedDeal","hitDealer","determineOutcome","rigTheDeckAndDeal","shuffledDeck","newPlayerHand","newDealerHand","netChipsWon","playerHand","playerScore","dealerScore","isWin","isTie","netBet","netGain","message","abs","useCallback","dealerHandCopy","riggedPlayerHands","riggedCurrentHand","riggedDeck","filter","includes","rigGameForSplits","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.30ea0f7e.chunk.js","sourcesContent":["/* Googled it and found that the\"Fisher-Yates Shuffle\" algo\r\nis the best for a truly non-biased shuffle. Neat-o factoid! (maybe)\r\n\r\nI am using Mike Bostock’s code (creator of the D3 visual library) \r\nas a Javascript implementation of this algorithm\r\n*/\r\n\r\nexport const generateShuffledDeck = () => {\r\n  const shuffle = deck => {\r\n    let m = deck.length,\r\n      i;\r\n    while (m) {\r\n      i = Math.floor(Math.random() * m--);\r\n      [deck[m], deck[i]] = [deck[i], deck[m]];\r\n    }\r\n    return deck;\r\n  };\r\n\r\n  const SUITS = [\"hearts\", \"diamonds\", \"spades\", \"clubs\"];\r\n  const RANKS = [\r\n    \"ace\",\r\n    \"two\",\r\n    \"three\",\r\n    \"four\",\r\n    \"five\",\r\n    \"six\",\r\n    \"seven\",\r\n    \"eight\",\r\n    \"nine\",\r\n    \"ten\",\r\n    \"jack\",\r\n    \"queen\",\r\n    \"king\"\r\n  ];\r\n\r\n  const UNSHUFFLED_DECK = RANKS.flatMap(rank =>\r\n    SUITS.map(suit => `${rank} of ${suit}`)\r\n  );\r\n  return shuffle(UNSHUFFLED_DECK);\r\n};\r\n","const rankToValuesMap = {\r\n  two: 2,\r\n  three: 3,\r\n  four: 4,\r\n  five: 5,\r\n  six: 6,\r\n  seven: 7,\r\n  eight: 8,\r\n  nine: 9,\r\n  ten: 10,\r\n  jack: 10,\r\n  queen: 10,\r\n  king: 10\r\n};\r\n\r\nconst getRankFromCard = card => card.split(\" \")[0];\r\n\r\nconst getHandTotals = cards => {\r\n  return cards.reduce(\r\n    (totals, currentCard) => {\r\n      const rank = getRankFromCard(currentCard);\r\n      if (rank === \"ace\") return { ...totals, totalAces: totals.totalAces + 1 };\r\n      const value = rankToValuesMap[rank];\r\n      return { ...totals, scoreWithoutAces: totals.scoreWithoutAces + value };\r\n    },\r\n    { scoreWithoutAces: 0, totalAces: 0 }\r\n  );\r\n};\r\n\r\nconst calculateScoreWithAces = (scoreWithoutAces, totalAces) => {\r\n  if (totalAces === 0) return scoreWithoutAces;\r\n  const largerScore = scoreWithoutAces + totalAces + 10;\r\n  const smallerScore = scoreWithoutAces + totalAces;\r\n  return largerScore <= 21 ? largerScore : smallerScore;\r\n};\r\n\r\nexport const sumHand = ({ cards }) => {\r\n  const { scoreWithoutAces, totalAces } = getHandTotals(cards);\r\n  return calculateScoreWithAces(scoreWithoutAces, totalAces);\r\n};\r\n","const getRankFromCard = card => card.split(\" \")[0];\r\n\r\nexport const isSplittableHand = ({ cards }) =>\r\n  cards.length === 2 && getRankFromCard(cards[0]) === getRankFromCard(cards[1]);\r\n","import React from \"react\";\r\nimport \"./Card.scss\";\r\n\r\nconst Card = ({ card }) => {\r\n  return (\r\n    <img\r\n      className={\"card-img\"}\r\n      key={card}\r\n      alt={card}\r\n      src={`cards/${card}.png`}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport { isEqual } from \"lodash\";\r\nimport { sumHand } from \"../../utils\";\r\nimport Card from \"../Card/Card\";\r\nimport \"./Hand.scss\";\r\n\r\nconst Hand = ({ hand, score, currentHand, turn }) => (\r\n  <div className=\"hand-wrapper\">\r\n    {<div className=\"scorebox\">{turn !== \"player\" ? score : \"??\"}</div>}\r\n    <div\r\n      className={\r\n        isEqual(currentHand, hand) ? \"cards-wrapper selected\" : \"cards-wrapper\"\r\n      }\r\n    >\r\n      {turn === \"player\" ? (\r\n        <>\r\n          <Card card={hand.cards[0]} /> <Card card=\"blue_back\" />\r\n        </>\r\n      ) : (\r\n        hand.cards.map(card => <Card key={card} card={card} />)\r\n      )}\r\n    </div>\r\n    {sumHand(hand) > 21 && <p className=\"busted-message\">BUSTED</p>}\r\n  </div>\r\n);\r\n\r\nexport default Hand;\r\n","import React from \"react\";\r\nimport Hand from \"../Hand/Hand\";\r\nimport { sumHand } from \"../../utils\";\r\nimport \"./PlayerSide.scss\";\r\n\r\nconst PlayerSide = ({ playerHands, currentHand }) => (\r\n  <div className=\"player-side-wrapper\">\r\n    {playerHands.map(hand => (\r\n      <Hand\r\n        key={JSON.stringify(hand)}\r\n        hand={hand}\r\n        score={sumHand(hand)}\r\n        currentHand={currentHand}\r\n      />\r\n    ))}\r\n    <p className=\"player-label\">PLAYER</p>\r\n  </div>\r\n);\r\n\r\nexport default PlayerSide;\r\n","import React from \"react\";\r\nimport { sumHand } from \"../../utils\";\r\nimport Hand from \"../Hand/Hand\";\r\nimport \"./DealerSide.scss\";\r\n\r\nconst DealerSide = ({ dealerHand, turn }) => (\r\n  <div className=\"dealer-side-wrapper\">\r\n    {dealerHand.cards.length > 0 && (\r\n      <Hand hand={dealerHand} score={sumHand(dealerHand)} turn={turn} />\r\n    )}\r\n    <p className=\"dealer-label\">DEALER</p>\r\n  </div>\r\n);\r\n\r\nexport default DealerSide;\r\n","import React from \"react\";\r\nimport \"./GameOverNotification.scss\";\r\n\r\nconst GameOverNotification = ({\r\n  gameOverNotification,\r\n  resetStateForNewHand,\r\n  setChips\r\n}) => (\r\n  <div className=\"game-over-notification-wrapper\">\r\n    <p className=\"game-over-notification\">{gameOverNotification}</p>\r\n    <button\r\n      className=\"game-over-notification-button\"\r\n      onClick={() => {\r\n        resetStateForNewHand();\r\n        setChips(1000);\r\n      }}\r\n    >\r\n      Take a lean on your house\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default GameOverNotification;\r\n","import React from \"react\";\r\nimport \"./OutcomeNotification.scss\";\r\n\r\nconst OutcomeNotification = ({ outcomeNotification, resetStateForNewHand }) => (\r\n  <div className=\"outcome-notification-wrapper\">\r\n    <p className=\"outcome-notification\">{outcomeNotification}</p>\r\n    <button\r\n      className=\"outcome-notification-button\"\r\n      onClick={resetStateForNewHand}\r\n    >\r\n      Deal 'er again please\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default OutcomeNotification;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./BetInput.scss\";\r\n\r\nconst BetInput = ({ setBet, chips, setChips }) => {\r\n  const [input, setInput] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  useEffect(() => {\r\n    if (errorMessage) {\r\n      const revert = setTimeout(() => setErrorMessage(\"\"), 1750);\r\n      return () => clearTimeout(revert);\r\n    }\r\n  }, [errorMessage]);\r\n\r\n  useEffect(() => {\r\n    setErrorMessage(\"\");\r\n  }, [input]);\r\n\r\n  const handleChange = e => {\r\n    const value = e.target.value;\r\n    const regEx = /[^0-9]/g;\r\n    const containsNonNumber = regEx.test(value);\r\n    if (containsNonNumber) {\r\n      setErrorMessage(\"Only numbers allowed - duh!\");\r\n    } else {\r\n      setInput(e.target.value);\r\n    }\r\n  };\r\n  const handleClick = () => {\r\n    const submittedBet = Number(input);\r\n    if (submittedBet > chips) {\r\n      setErrorMessage(\"You don't have enough chips to bet that much - duh!\");\r\n    } else {\r\n      setBet(submittedBet);\r\n      setChips(chips - submittedBet);\r\n    }\r\n  };\r\n  const handleEnter = e => {\r\n    if (e.key === \"Enter\") handleClick();\r\n  };\r\n  return (\r\n    <div className=\"bet-input-wrapper\">\r\n      <input\r\n        className=\"bet-input\"\r\n        value={input}\r\n        onChange={handleChange}\r\n        onKeyPress={handleEnter}\r\n      />\r\n      <button className=\"bet-input-button\" onClick={handleClick}>\r\n        Bet\r\n      </button>\r\n      {errorMessage && <p className=\"error\">{errorMessage}</p>}\r\n      {input.length === 0 && (\r\n        <p className=\"enter-a-bet-message\">Enter a bet first!</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BetInput;\r\n","import React from \"react\";\r\nimport \"./GameButton.scss\";\r\n\r\nconst GameButton = ({ onClick, content }) => (\r\n  <div className=\"button-wrapper\">\r\n    <button className=\"game-button\" onClick={onClick}>\r\n      {content}\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default GameButton;\r\n","import React from \"react\";\r\nimport \"./ChipsTally.scss\";\r\n\r\nconst ChipsTally = ({ chips }) => (\r\n  <div className=\"chips-wrapper\">\r\n    <div className=\"player-chips\">Chips: {chips}</div>\r\n  </div>\r\n);\r\n\r\nexport default ChipsTally;\r\n","import React from \"react\";\r\nimport \"./RigDeckCheckbox.scss\";\r\n\r\nconst RigDeckCheckbox = ({ toggleIsRiggedForSplits }) => (\r\n  <div className=\"rig-deck-wrapper\">\r\n    <input\r\n      type=\"checkbox\"\r\n      style={{ width: \"20px\", height: \"20px\" }}\r\n      id=\"rig-deck-checkbox\"\r\n      onChange={e => toggleIsRiggedForSplits(e.target.checked)}\r\n    />\r\n    <label className=\"rig-deck-label\" htmlFor=\"rig-deck-checkbox\">\r\n      Get dealt a splittable hand\r\n    </label>\r\n  </div>\r\n);\r\n\r\nexport default RigDeckCheckbox;\r\n","import React from \"react\";\r\n/*********\r\nCOMPONENTS\r\n**********/\r\nimport BetInput from \"../BetInput/BetInput\";\r\nimport GameButton from \"../GameButton/GameButton\";\r\nimport ChipsTally from \"../ChipsTally/ChipsTally\";\r\nimport RigDeckCheckbox from \"../RigDeckCheckbox/RigDeckCheckbox\";\r\n\r\n/************\r\nUTIL FUNCTIONS\r\n*************/\r\nimport { isEqual, cloneDeep } from \"lodash\";\r\nimport { isSplittableHand } from \"../../utils\";\r\n\r\n/******\r\nSTYLES\r\n*******/\r\nimport \"./ControlPanel.scss\";\r\n\r\nconst ControlPanel = ({\r\n  deck,\r\n  setDeck,\r\n  bet,\r\n  setBet,\r\n  chips,\r\n  setChips,\r\n  playerHands,\r\n  setPlayerHands,\r\n  currentHand,\r\n  setCurrentHand,\r\n  turn,\r\n  setTurn,\r\n  gameOverNotification,\r\n  outcomeNotification,\r\n  toggleIsRiggedForSplits\r\n}) => {\r\n  //----------------------------------------------------------------//\r\n  //                         HELPERS                                //\r\n  //----------------------------------------------------------------//\r\n  const hitPlayer = () => {\r\n    //make copies\r\n    const deckCopy = [...deck];\r\n    const handsCopy = cloneDeep(playerHands);\r\n    const currentHandCopy = cloneDeep(currentHand);\r\n\r\n    //deal a new card to the current hand\r\n    const newCard = deckCopy.pop();\r\n    currentHandCopy.cards.push(newCard);\r\n\r\n    //replace the old hand with the new hand\r\n    const currentHandIndex = playerHands.findIndex(hand =>\r\n      isEqual(hand, currentHand)\r\n    );\r\n    handsCopy.splice(currentHandIndex, 1, currentHandCopy);\r\n\r\n    //update state\r\n    setPlayerHands(handsCopy);\r\n    setCurrentHand(currentHandCopy);\r\n    setDeck(deckCopy);\r\n  };\r\n\r\n  const handleSplit = () => {\r\n    //make copies\r\n    const handsCopy = cloneDeep(playerHands);\r\n    const currentHandCopy = cloneDeep(currentHand);\r\n\r\n    //replace the current hand with 2 split hands\r\n    const currentHandIndex = playerHands.findIndex(hand =>\r\n      isEqual(hand, currentHand)\r\n    );\r\n    handsCopy.splice(\r\n      currentHandIndex,\r\n      1,\r\n      { cards: [currentHandCopy.cards[0]], bet },\r\n      { cards: [currentHandCopy.cards[1]], bet }\r\n    );\r\n\r\n    //update state\r\n    setCurrentHand(handsCopy[0]);\r\n    setPlayerHands(handsCopy);\r\n    setChips(chips => chips - bet);\r\n  };\r\n\r\n  const handleStand = () => {\r\n    //make copies\r\n    const handsCopy = cloneDeep(playerHands);\r\n\r\n    //determine if it's the dealer's turn yet\r\n    //or whether we still have more player hands\r\n    const currentIndex = playerHands.findIndex(hand =>\r\n      isEqual(hand, currentHand)\r\n    );\r\n    const nextHand = handsCopy[currentIndex + 1];\r\n    if (nextHand) {\r\n      setCurrentHand(nextHand);\r\n    } else {\r\n      setTurn(\"dealer\");\r\n    }\r\n  };\r\n\r\n  const handleDoubleDown = () => {\r\n    //make copies\r\n    const deckCopy = [...deck];\r\n    const handsCopy = cloneDeep(playerHands);\r\n    const currentHandCopy = cloneDeep(currentHand);\r\n\r\n    //deal only one additional card\r\n    const newCard = deckCopy.pop();\r\n    currentHandCopy.cards.push(newCard);\r\n\r\n    //double the current bet\r\n    currentHandCopy.bet *= 2;\r\n\r\n    //update the state of current hand to reflect new bet and final card\r\n    setCurrentHand(currentHandCopy);\r\n\r\n    //decrement player chip count correspondingly\r\n    setChips(chips => chips - currentHandCopy.bet);\r\n\r\n    //get index of current hand in the player hand array\r\n    const currentIndex = playerHands.findIndex(hand =>\r\n      isEqual(hand, currentHand)\r\n    );\r\n\r\n    //update the player hands array with the updated hand\r\n    handsCopy.splice(currentIndex, 1, currentHandCopy);\r\n    setPlayerHands(handsCopy);\r\n\r\n    //determine if it's the dealer's turn yet\r\n    //or whether we still have more player hands\r\n    const nextHand = handsCopy[currentIndex + 1];\r\n    if (nextHand) {\r\n      setCurrentHand(nextHand);\r\n    } else {\r\n      setTurn(\"dealer\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ChipsTally chips={chips} />\r\n      {bet === 0 && (\r\n        <>\r\n          <BetInput setBet={setBet} chips={chips} setChips={setChips} />\r\n          <RigDeckCheckbox toggleIsRiggedForSplits={toggleIsRiggedForSplits} />\r\n        </>\r\n      )}\r\n      {turn === \"player\" &&\r\n        !gameOverNotification &&\r\n        !outcomeNotification &&\r\n        bet > 0 && (\r\n          <>\r\n            <GameButton onClick={e => hitPlayer()} content=\"Hit\" />\r\n            <GameButton onClick={handleStand} content=\"Stand\" />\r\n            {chips > bet &&\r\n              (currentHand.cards.length === 2 ||\r\n                currentHand.cards.length === 1) && (\r\n                <GameButton onClick={handleDoubleDown} content=\"Double Down\" />\r\n              )}\r\n            {chips > bet && isSplittableHand(currentHand) && (\r\n              <GameButton onClick={handleSplit} content=\"Split\" />\r\n            )}\r\n          </>\r\n        )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ControlPanel;\r\n","import React, { useEffect, useState, useCallback } from \"react\";\r\n\r\n/*********\r\nCOMPONENTS\r\n**********/\r\nimport PlayerSide from \"./components/PlayerSide/PlayerSide\";\r\nimport DealerSide from \"./components/DealerSide/DealerSide\";\r\nimport GameOverNotification from \"./components/GameOverNotification/GameOverNotification\";\r\nimport OutcomeNotification from \"./components/OutcomeNotification/OutcomeNotification\";\r\nimport ControlPanel from \"./components/ControlPanel/ControlPanel\";\r\n\r\n/************\r\nUTIL FUNCTIONS\r\n*************/\r\nimport { cloneDeep, isEqual } from \"lodash\";\r\nimport {\r\n  generateShuffledDeck,\r\n  sumHand,\r\n  isWin,\r\n  isTie,\r\n  rigGameForSplits\r\n} from \"./utils\";\r\n\r\n/******\r\nSTYLES\r\n*******/\r\nimport \"./App.scss\";\r\n\r\nconst App = () => {\r\n  //----------------------------------------------------------------//\r\n  //                      INITIAL STATE                             //\r\n  //----------------------------------------------------------------//\r\n\r\n  const [deck, setDeck] = useState([]);\r\n  const [chips, setChips] = useState(1000);\r\n  const [bet, setBet] = useState(0);\r\n  const [turn, setTurn] = useState(\"player\");\r\n  const [dealerHand, setDealerHand] = useState({ cards: [] });\r\n  //we can have multiple player hands due to splitting\r\n  const [playerHands, setPlayerHands] = useState([]);\r\n  //refers to the hand which the player makes decisions on currently\r\n  const [currentHand, setCurrentHand] = useState({ cards: [], bet: 0 });\r\n  //stacks the deck to test the functionality/logic involved in splitting\r\n  const [isRiggedForSplits, toggleIsRiggedForSplits] = useState(false);\r\n\r\n  //notifications\r\n  const [outcomeNotification, setOutcomeNotification] = useState(\"\");\r\n  const [gameOverNotification, setGameOverNotification] = useState(\"\");\r\n\r\n  // console.log({ deck });\r\n  // console.log({playerHands})\r\n  // console.log({ dealerHand });\r\n\r\n  //----------------------------------------------------------------//\r\n  //                        SIDE EFFECTS                            //\r\n  //----------------------------------------------------------------//\r\n\r\n  //if bet has been submitted and player has no hand dealt, deal cards\r\n  useEffect(() => {\r\n    if (bet > 0 && !playerHands.length) dealCards();\r\n  }, [bet]);\r\n\r\n  /*\r\n  determines what to do if the current player hand \"busts\" (over 21)\r\n  if it is the only hand or is the last hand of splitted hands,\r\n  it is now the dealer's turn. otherwise, we move to the next player hand\r\n  */\r\n  useEffect(() => {\r\n    if (\r\n      sumHand(currentHand) >= 21 &&\r\n      !playerHands.every(hand => sumHand(hand) > 21)\r\n    ) {\r\n      const handsCopy = cloneDeep(playerHands);\r\n      const currentIndex = playerHands.findIndex(hand =>\r\n        isEqual(hand, currentHand)\r\n      );\r\n      const nextHand = handsCopy[currentIndex + 1];\r\n      if (nextHand) {\r\n        setCurrentHand(nextHand);\r\n      } else {\r\n        const delayedSetTurn = setTimeout(() => setTurn(\"dealer\"), 1000);\r\n        return () => clearTimeout(delayedSetTurn);\r\n      }\r\n    }\r\n  }, [currentHand]);\r\n\r\n  //if it is the dealer's turn and the dealer's hand is less than 16,\r\n  //hit the dealer. else it is time to determine the outcome\r\n  useEffect(() => {\r\n    if (turn === \"dealer\") {\r\n      if (sumHand(dealerHand) < 17) {\r\n        const delayedDeal = setTimeout(hitDealer, 1100);\r\n        return () => clearTimeout(delayedDeal);\r\n      } else return determineOutcome();\r\n    }\r\n  }, [turn, dealerHand]);\r\n\r\n  /*\r\n  checks to see whether every player hand is \"busted\" (over 21)\r\n  if so, there is no need for the dealer to be dealt cards \r\n  and we move on to the next deal\r\n  */\r\n  useEffect(() => {\r\n    if (playerHands.length && playerHands.every(hand => sumHand(hand) > 21)) {\r\n      determineOutcome();\r\n    }\r\n  }, [playerHands]);\r\n\r\n  //----------------------------------------------------------------//\r\n  //                         HELPERS                                //\r\n  //----------------------------------------------------------------//\r\n\r\n  const dealCards = () => {\r\n    //this is for the game mode where you are guaranteed to be dealt 4 2s in a row\r\n    if (isRiggedForSplits) {\r\n      rigTheDeckAndDeal();\r\n    } else {\r\n      const shuffledDeck = generateShuffledDeck();\r\n      const newPlayerHand = {\r\n        cards: [shuffledDeck.pop(), shuffledDeck.pop()],\r\n        //we grab the base bet amount from global state but this\r\n        //can be mutated later by doubling down or insurance\r\n        //(insurance in future story)\r\n        bet\r\n      };\r\n      const newDealerHand = { cards: [shuffledDeck.pop(), shuffledDeck.pop()] };\r\n      setDeck(shuffledDeck);\r\n      setPlayerHands([newPlayerHand]);\r\n      setCurrentHand(newPlayerHand);\r\n      setDealerHand(newDealerHand);\r\n    }\r\n  };\r\n\r\n  const determineOutcome = () => {\r\n    //for every player hand, we determine whether it is a win or a tie\r\n    //then tally up accordingly\r\n    const netChipsWon = playerHands.reduce((netChipsWon, playerHand) => {\r\n      return isWin(playerHand, dealerHand)\r\n        ? netChipsWon + playerHand.bet * 2\r\n        : isTie(playerHand, dealerHand)\r\n        ? netChipsWon + playerHand.bet\r\n        : netChipsWon;\r\n    }, 0);\r\n    setChips(chips => chips + netChipsWon);\r\n    //game over condition:\r\n    //if player has 0 chips left and didn't win any chips this deal\r\n    if (chips <= 0 && netChipsWon === 0) {\r\n      setGameOverNotification(\r\n        \"You have ZERO chips. You are crap out of luck 😊\"\r\n      );\r\n    } else {\r\n      const netBet = playerHands.reduce((netBet, { bet }) => netBet + bet, 0);\r\n      const netGain = netChipsWon - netBet;\r\n      const message =\r\n        netGain > 0\r\n          ? `You won ${netGain} chips`\r\n          : netGain === 0\r\n          ? \"You broke even\"\r\n          : `You lost ${Math.abs(netGain)} chips`;\r\n      setOutcomeNotification(message);\r\n    }\r\n  };\r\n\r\n  const resetStateForNewHand = () => {\r\n    setBet(0);\r\n    setPlayerHands([]);\r\n    setCurrentHand({ cards: [], bet: 0 });\r\n    setDealerHand({ cards: [] });\r\n    setDeck([]);\r\n    setTurn(\"player\");\r\n    toggleIsRiggedForSplits(false);\r\n    setOutcomeNotification(\"\");\r\n    setGameOverNotification(\"\");\r\n  };\r\n\r\n  const hitDealer = useCallback(() => {\r\n    if (playerHands.every(hand => sumHand(hand) > 21)) {\r\n      determineOutcome();\r\n    } else {\r\n      //make copies\r\n      const deckCopy = [...deck];\r\n      const dealerHandCopy = cloneDeep(dealerHand);\r\n      //deal card\r\n      dealerHandCopy.cards.push(deckCopy.pop());\r\n      //update state\r\n      setDealerHand(dealerHandCopy);\r\n      setDeck(deckCopy);\r\n    }\r\n  }, [deck]);\r\n\r\n  const rigTheDeckAndDeal = () => {\r\n    const {\r\n      riggedDeck,\r\n      dealerHand,\r\n      riggedPlayerHands,\r\n      riggedCurrentHand\r\n    } = rigGameForSplits(bet);\r\n    setDeck(riggedDeck);\r\n    setDealerHand(dealerHand);\r\n    setPlayerHands(riggedPlayerHands);\r\n    setCurrentHand(riggedCurrentHand);\r\n  };\r\n\r\n  //----------------------------------------------------------------//\r\n  //                         RENDER                                 //\r\n  //----------------------------------------------------------------//\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <section className=\"game-display-section\">\r\n        <PlayerSide playerHands={playerHands} currentHand={currentHand} />\r\n        <DealerSide dealerHand={dealerHand} turn={turn} />\r\n      </section>\r\n      <section className=\"control-panel-section\">\r\n        <ControlPanel\r\n          deck={deck}\r\n          setDeck={setDeck}\r\n          bet={bet}\r\n          setBet={setBet}\r\n          chips={chips}\r\n          setChips={setChips}\r\n          playerHands={playerHands}\r\n          setPlayerHands={setPlayerHands}\r\n          currentHand={currentHand}\r\n          setCurrentHand={setCurrentHand}\r\n          turn={turn}\r\n          setTurn={setTurn}\r\n          gameOverNotification={gameOverNotification}\r\n          outcomeNotification={outcomeNotification}\r\n          toggleIsRiggedForSplits={toggleIsRiggedForSplits}\r\n        />\r\n      </section>\r\n      {outcomeNotification && (\r\n        <OutcomeNotification\r\n          outcomeNotification={outcomeNotification}\r\n          resetStateForNewHand={resetStateForNewHand}\r\n        />\r\n      )}\r\n      {gameOverNotification && (\r\n        <GameOverNotification\r\n          gameOverNotification={gameOverNotification}\r\n          resetStateForNewHand={resetStateForNewHand}\r\n          setChips={setChips}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { sumHand } from \"./sumHand\";\r\n\r\nexport const isWin = (playerHand, dealerHand) => {\r\n  const playerScore = sumHand(playerHand);\r\n  const dealerScore = sumHand(dealerHand);\r\n  return (\r\n    (playerScore <= 21 && playerScore > dealerScore) ||\r\n    (playerScore <= 21 && dealerScore > 21)\r\n  );\r\n};\r\n","import { sumHand } from \"./sumHand\";\r\n\r\nexport const isTie = (playerHand, dealerHand) => {\r\n  const playerScore = sumHand(playerHand);\r\n  const dealerScore = sumHand(dealerHand);\r\n  return (\r\n    (playerScore <= 21 && playerScore === dealerScore) ||\r\n    (playerScore > 21 && dealerScore > 21)\r\n  );\r\n};\r\n","import { generateShuffledDeck } from \"./generateShuffledDeck\";\r\n\r\nexport const rigGameForSplits = bet => {\r\n  //rigged deal to guarantee a splittable hand for player\r\n  const riggedPlayerHands = [{ cards: [\"two of clubs\", \"two of hearts\"], bet }];\r\n  const riggedCurrentHand = { cards: [\"two of clubs\", \"two of hearts\"], bet };\r\n  //filter out the remaining 2s which will be added to top of deck\r\n  //as well as the already-dealt cards (to avoid buggy behavior)\r\n  const riggedDeck = generateShuffledDeck().filter(\r\n    card =>\r\n      ![\r\n        \"two of clubs\",\r\n        \"two of hearts\",\r\n        \"two of diamonds\",\r\n        \"two of spades\"\r\n      ].includes(card)\r\n  );\r\n  const dealerHand = { cards: [riggedDeck.pop(), riggedDeck.pop()] };\r\n  //stack the deck so that the top two cards will be the remaining 2s\r\n  riggedDeck.push(\"two of diamonds\", \"two of spades\");\r\n  return { riggedDeck, dealerHand, riggedPlayerHands, riggedCurrentHand };\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}